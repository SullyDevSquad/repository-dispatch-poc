name: Kickoff gates when called via api

on:
  repository_dispatch:
    types: [kick-gates]

jobs:
 runTests:
    runs-on: ubuntu-latest
    outputs:
      test_pass_percent: ${{ steps.tests.outputs.test_pass_percent }}
    steps:
      - name: Execute tests and get pass percentage
        id: tests
        run: |
          echo "Running tests..."
          echo "Tests passed! Grabbing test pass percentage"
          echo test, and deploy your project.
          # set output
          echo "test_pass_percent=100" >> $GITHUB_OUTPUT
 securityCheck:
    runs-on: ubuntu-latest
    outputs:
      security_checks_passed: ${{ steps.security.outputs.security_checks_passed }}
    steps:
      - name: Execute security checks
        id: security
        run: |
          echo "Running security checks..."
          echo "Security checks passed!"
          echo "security_checks_passed=true" >> $GITHUB_OUTPUT
          
 makeRepoDispatch:
    runs-on: ubuntu-latest
    needs: [runTests, securityCheck]
    steps:
      - name: Make repo dispatch call
        id: repo-dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          event-type: kickoff-qa-deploy
          token: ${{ secrets.PAT }}
          client-payload: '{"test_pass_percent": "${{ needs.runTests.outputs.test_pass_percent }}", "security_checks_passed": "${{ needs.securityCheck.outputs.security_checks_passed }}"}'

 createIssue:
    runs-on: ubuntu-latest
    needs: [runTests, securityCheck]
    steps:
      - name: Create issue via the API
        shell: python
        run: |
          import requests
          import json

          # get current day
          import datetime

          # make api call to create issue
          issueBody = """
          # Gating Results

          | Gate | Result |
          | ---- | ------ |
          | Tests | ${{ needs.runTests.outputs.test_pass_percent }}% |
          | Security | Repository Compliant?: ${{ needs.securityCheck.outputs.security_checks_passed }} |
          """

          # create issue
          now = datetime.datetime.now()

          # create issue via github api
          url = "https://api.github.com/repos/SullyDevSquad/repository-dispatch-poc/issues"
          headers = {
              "Authorization": "token ${{ secrets.GITHUB_TOKEN }}" 
          }
          data = {
              "title": f"Gating Results {now.strftime('%Y-%m-%d')}",
              "body": issueBody
          }

          response = requests.post(url, headers=headers, data=json.dumps(data))
          print(response.status_code)
          
